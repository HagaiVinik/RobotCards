{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","App","onSearchChange","event","setState","target","value","state","fetch","headers","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAceA,EAZF,SAACC,GACb,OACC,yBAAKC,UAAY,oDAChB,yBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAAMI,GAAlC,wBACvB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCeCC,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAECA,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLP,GAAMI,EAAOG,GAAGP,GAChBC,KAAQG,EAAOG,GAAGN,KAClBC,MAASE,EAAOG,GAAGL,YCETO,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKd,UAAW,OACf,2BACCA,UAAY,mCACZe,KAAO,SACPC,YAAc,gBACdC,SAAWH,MCEAI,EARA,SAACnB,GACf,OACC,yBAAKoB,MAAS,CAAEC,UAAW,SAAUC,OAAQ,WAC3CtB,EAAMuB,WC2CKC,G,kBAxCd,aACC,IAAD,8BACC,+CAWCC,eAAiB,SAACC,GAEnB,EAAKC,SAAS,CAACb,YAAYY,EAAME,OAAOC,SAZxC,EAAKC,MAAQ,CACZtB,OAAQ,GACRM,YAAY,IAJd,E,iFAQoB,IAAD,OAClBiB,MAAM,6CAA8C,CAACC,QAAS,CAAC,8BAA+B,OAC5FC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACxBF,KAAK,SAAAG,GAAK,MAAG,CAAC,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAOxC,IAAD,OACOC,EAAeC,KAAKR,MAAMtB,OAAO+B,OAAO,SAAA/B,GAC7C,OAAOA,EAAOH,KAAKmC,cAAcC,SAAS,EAAKX,MAAMhB,YAAY0B,iBAElE,OAAgC,IAA7BF,KAAKR,MAAMtB,OAAOkC,OACb,wCAGN,yBAAKzC,UAAY,MAChB,wBAAIA,UAAY,MAAhB,gBACA,kBAAC,EAAD,CAAWc,aAAgBuB,KAAKb,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,OAAQ6B,U,GAjCNM,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,gB","file":"static/js/main.89dfc2c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2' >\r\n\t\t\t<img alt = 'robots' src = {`https://robohash.org/${props.id}tesfwedcds?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user,i) => {\r\n\t\t\treturn (\t\r\n\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid = {robots[i].id} \r\n\t\t\t\t\tname = {robots[i].name} \r\n\t\t\t\t\temail = {robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) => {\r\n\treturn (\r\n\t\t<div className= 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype = 'search' \r\n\t\t\t\tplaceholder = 'search robots'\r\n\t\t\t\tonChange= {searchChange}\r\n\t\t\t/>\r\n\t\t\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style = {{ overflowY: 'Scroll', height: '1000px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\n\r\nclass App extends React.Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField:''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users', {headers: {'Access-Control-Allow-Origin': '*'}})\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t\t.then(users=> [this.setState({robots: users})]);\r\n\t}\tonSearchChange = (event) =>\r\n\t{\r\n\t\tthis.setState({searchField:event.target.value});\t\t\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst filterRobots = this.state.robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0){\r\n\t\t\treturn <h1>Loading </h1>;\r\n\t\t} else{\r\n\t\t\treturn (\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className = 'f1'> RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\t\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from'./containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}